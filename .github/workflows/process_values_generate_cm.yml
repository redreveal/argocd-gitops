name: Process Values and Generate ConfigMap

on:
  push:
    paths:
      - 'versions/**/processing-agent-config.yml'

jobs:
  determine-environment:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Determine Environment Based on Modified Files
        id: set-env
        uses: actions/github-script@v5
        with:
          script: |
            const patternProd = new RegExp('versions/prod.*/processing-agent-config\\.yml');
            const patternUat = new RegExp('versions/uat.*/processing-agent-config\\.yml');
            const patternDev = new RegExp('versions/dev.*/processing-agent-config\\.yml');
            
            const files = context.payload.commits
              .flatMap(commit => [...commit.added, ...commit.modified])
              .filter(file => patternProd.test(file) || patternUat.test(file) || patternDev.test(file));
            
            let environment = 'unknown';
            if (files.some(file => patternProd.test(file))) {
              environment = 'production';
            } else if (files.some(file => patternUat.test(file))) {
              environment = 'uat';
            } else if (files.some(file => patternDev.test(file))) {
              environment = 'dev';
            }

            core.setOutput('environment', environment);

  process-and-update-config:
    needs: determine-environment
    runs-on: ubuntu-latest
    environment:
      name: ${{ needs.determine-environment.outputs.environment }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Install Dependencies
        run: sudo apt-get install -y jq

      - name: Get List of Modified Config Files
        id: get_modified_files
        uses: actions/github-script@v5
        with:
          script: |
            const payload = context.payload;
            const repo = context.repo;
            let base, head;
            
            if (payload.pull_request) {
              base = payload.pull_request.base.sha;
              head = payload.pull_request.head.sha;
            } else {
              base = payload.before;
              head = payload.after;
            }
            
            const compare = await github.rest.repos.compareCommits({
              owner: repo.owner,
              repo: repo.repo,
              base: base,
              head: head
            });
            
            const modifiedFiles = compare.data.files.filter(file => (file.status === 'modified' || file.status === 'added') && file.filename.startsWith('versions/') && file.filename.endsWith('processing-agent-config.yml'))
              .map(file => file.filename);
            
            return modifiedFiles;

      - name: Clone processing-agent-automation Repository
        if: steps.get_modified_files.outputs.result != '[]'
        run: |
          git clone https://${{ secrets.TOKEN }}:x-oauth-basic@github.com/redreveal/argocd-gitops-versions.git ${{ github.workspace }}/argocd-gitops-versions

      - name: Process Each Modified Config File and Update Values.yaml
        if: steps.get_modified_files.outputs.result != '[]'
        run: |
          MODIFIED_FILES=${{ steps.get_modified_files.outputs.result }}
          IFS=',' read -ra FILES <<< "$MODIFIED_FILES"
          for FILE in "${FILES[@]}"; do
            FILE="${FILE//'"'/}"  # Trim quotes
            FILE="${FILE//']'/}"  # Remove closing bracket
            FILE="${FILE//'['/}"  # Remove opening bracket
            echo "Processing $FILE"
            # Construct the relative path for the corresponding values.yaml
            RELATIVE_PATH="${FILE#versions/}"  # Strip the 'versions/' prefix
            RELATIVE_DIR=$(dirname "$RELATIVE_PATH")  # Get the directory path
            VALUES_FILE_PATH="${{ github.workspace }}/argocd-gitops-versions/versions/$RELATIVE_DIR/values.yaml"
            echo "Updating values.yaml at: $VALUES_FILE_PATH"
            python3 ./scripts/process_values_to_cm.py "$FILE" "$VALUES_FILE_PATH"
          done
        shell: bash

      - name: Commit and Push Updates to processing-agent-automation Repository
        if: steps.get_modified_files.outputs.result != '[]'
        run: |
          cd ${{ github.workspace }}/argocd-gitops-versions
          git config user.email "rberisha@revealdata.com"
          git config user.name "Redon Berisha"
          git add .
          git commit -m "Update ConfigMaps and values.yaml"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        shell: bash
