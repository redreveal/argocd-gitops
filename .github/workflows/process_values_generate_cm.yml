name: Process Values and Generate ConfigMap

on:
  push:
    paths:
      - 'versions/**/processing-agent-config.yml'

jobs:
  determine-environment:
    runs-on: ubuntu-latest
    outputs:
      prod_changed: ${{ steps.determine-env.outputs.prod_changed }}
      dev_uat_changed: ${{ steps.determine-env.outputs.dev_uat_changed }}
      commit_message: ${{ steps.commit-message.outputs.commit_message }} # Output the commit message
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Get Commit Message
        id: commit-message
        run: echo "::set-output name=commit_message::$(git log -1 --pretty=%B)"

      - name: Determine Environment Based on Modified Files
        id: determine-env
        uses: actions/github-script@v5
        with:
          script: |
            const payload = context.payload;
            const repo = context.repo;
            let base, head;
            
            if (payload.pull_request) {
              base = payload.pull_request.base.sha;
              head = payload.pull_request.head.sha;
            } else {
              base = payload.before;
              head = payload.after;
            }
            
            const compare = await github.rest.repos.compareCommits({
              owner: repo.owner,
              repo: repo.repo,
              base: base,
              head: head
            });
            
            let prod_changed = false;
            let dev_uat_changed = false;
            const patternProd = new RegExp('^versions/prod.*/processing-agent-config\\.yml$');
            const patternUatDev = new RegExp('^versions/(uat|dev).*/processing-agent-config\\.yml$');

            compare.data.files.forEach(file => {
              if (patternProd.test(file.filename)) {
                prod_changed = true;
              } else if (patternUatDev.test(file.filename)) {
                dev_uat_changed = true;
              }
            });
            
            core.setOutput('prod_changed', prod_changed);
            core.setOutput('dev_uat_changed', dev_uat_changed);

  process-values-production:
    needs: determine-environment
    if: needs.determine-environment.outputs.prod_changed == 'true'
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up SSH key for remote repo
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.ARGOCD_GITOPS_VERSIONS_DEPLOYMENT_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan github.com >> ~/.ssh/known_hosts

      - name: Install Dependencies
        run: sudo apt-get install -y jq

      - name: Get List of Modified Config Files
        id: get_modified_files
        uses: actions/github-script@v5
        with:
          script: |
            const payload = context.payload;
            const repo = context.repo;
            let base, head;
            
            if (payload.pull_request) {
              base = payload.pull_request.base.sha;
              head = payload.pull_request.head.sha;
            } else {
              base = payload.before;
              head = payload.after;
            }
            
            const compare = await github.rest.repos.compareCommits({
              owner: repo.owner,
              repo: repo.repo,
              base: base,
              head: head
            });
            
            const modifiedFiles = compare.data.files.filter(file => (file.status === 'modified' || file.status === 'added') && file.filename.startsWith('versions/prod') && file.filename.endsWith('processing-agent-config.yml'))
              .map(file => file.filename);
            
            return modifiedFiles;

      - name: Clone processing-agent-automation Repository using SSH
        if: steps.get_modified_files.outputs.result != '[]'
        run: |
          git clone git@github.com:redreveal/argocd-gitops-versions.git ${{ github.workspace }}/argocd-gitops-versions

      - name: Process Each Modified Config File and Update Values.yaml
        if: steps.get_modified_files.outputs.result != '[]'
        run: |
          MODIFIED_FILES=${{ steps.get_modified_files.outputs.result }}
          IFS=',' read -ra FILES <<< "$MODIFIED_FILES"
          for FILE in "${FILES[@]}"; do
            FILE="${FILE//'"'/}"  # Trim quotes
            FILE="${FILE//']'/}"  # Remove closing bracket
            FILE="${FILE//'['/}"  # Remove opening bracket
            echo "Processing $FILE"
            # Construct the relative path for the corresponding values.yaml
            RELATIVE_PATH="${FILE#versions/}"  # Strip the 'versions/' prefix
            RELATIVE_DIR=$(dirname "$RELATIVE_PATH")  # Get the directory path
            VALUES_FILE_PATH="${{ github.workspace }}/argocd-gitops-versions/processing/versions/$RELATIVE_DIR/values.yaml"
          
            if [ ! -f "$VALUES_FILE_PATH" ]; then
              echo "values.yaml does not exist at $VALUES_FILE_PATH, creating file."
              mkdir -p $(dirname "$VALUES_FILE_PATH") # Ensure directory exists
              echo "configMap: {}" > "$VALUES_FILE_PATH"
            fi
          
            echo "Updating values.yaml at: $VALUES_FILE_PATH"
            python3 ./.github/actions/scripts/process_values_to_cm.py "$FILE" "$VALUES_FILE_PATH"
          done
        shell: bash

      - name: Commit and Push Updates to processing-agent-automation Repository
        if: steps.get_modified_files.outputs.result != '[]'
        run: |
          cd ${{ github.workspace }}/argocd-gitops-versions
          git config user.email "rberisha@revealdata.com"
          git config user.name "Redon Berisha"
          if [ -z "$(git status --porcelain)" ]; then
            echo "No changes detected, skipping commit and push."
            exit 0
          else
            git add .
            git commit -m "${{ needs.determine-environment.outputs.commit_message }}"
            git push
          fi
        env:
          GIT_SSH_COMMAND: "ssh -i ~/.ssh/id_rsa"
        shell: bash

  process-values-dev-uat:
    needs: determine-environment
    if: needs.determine-environment.outputs.dev_uat_changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up SSH key for remote repo
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.ARGOCD_GITOPS_VERSIONS_DEPLOYMENT_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan github.com >> ~/.ssh/known_hosts

      - name: Install Dependencies
        run: sudo apt-get install -y jq

      - name: Get List of Modified Config Files
        id: get_modified_files
        uses: actions/github-script@v5
        with:
          script: |
            const payload = context.payload;
            const repo = context.repo;
            let base, head;

            if (payload.pull_request) {
              base = payload.pull_request.base.sha;
              head = payload.pull_request.head.sha;
            } else {
              base = payload.before;
              head = payload.after;
            }

            const compare = await github.rest.repos.compareCommits({
              owner: repo.owner,
              repo: repo.repo,
              base: base,
              head: head
            });

            const modifiedFiles = compare.data.files.filter(file => (file.status === 'modified' || file.status === 'added') && (file.filename.startsWith('versions/dev/') || file.filename.startsWith('versions/uat/')) && file.filename.endsWith('processing-agent-config.yml'))
              .map(file => file.filename);

            return modifiedFiles;

      - name: Clone processing-agent-automation Repository using SSH
        if: steps.get_modified_files.outputs.result != '[]'
        run: |
          git clone git@github.com:redreveal/argocd-gitops-versions.git ${{ github.workspace }}/argocd-gitops-versions

      - name: Process Each Modified Config File and Update Values.yaml
        if: steps.get_modified_files.outputs.result != '[]'
        run: |
          MODIFIED_FILES=${{ steps.get_modified_files.outputs.result }}
          IFS=',' read -ra FILES <<< "$MODIFIED_FILES"
          for FILE in "${FILES[@]}"; do
            FILE="${FILE//'"'/}"  # Trim quotes
            FILE="${FILE//']'/}"  # Remove closing bracket
            FILE="${FILE//'['/}"  # Remove opening bracket
            echo "Processing $FILE"
            # Construct the relative path for the corresponding values.yaml
            RELATIVE_PATH="${FILE#versions/}"  # Strip the 'versions/' prefix
            RELATIVE_DIR=$(dirname "$RELATIVE_PATH")  # Get the directory path
            VALUES_FILE_PATH="${{ github.workspace }}/argocd-gitops-versions/processing/versions/$RELATIVE_DIR/values.yaml"
          
            if [ ! -f "$VALUES_FILE_PATH" ]; then
              echo "values.yaml does not exist at $VALUES_FILE_PATH, creating file."
              mkdir -p $(dirname "$VALUES_FILE_PATH") # Ensure directory exists
              echo "configMap: {}" > "$VALUES_FILE_PATH"
            fi
          
            echo "Updating values.yaml at: $VALUES_FILE_PATH"
            python3 ./.github/actions/scripts/process_values_to_cm.py "$FILE" "$VALUES_FILE_PATH"
          done
        shell: bash

      - name: Commit and Push Updates to processing-agent-automation Repository
        if: steps.get_modified_files.outputs.result != '[]'
        run: |
          cd ${{ github.workspace }}/argocd-gitops-versions
          git config user.email "rberisha@revealdata.com"
          git config user.name "Redon Berisha"
          if [ -z "$(git status --porcelain)" ]; then
            echo "No changes detected, skipping commit and push."
            exit 0
          else
            git add .
            git commit -m "${{ needs.determine-environment.outputs.commit_message }}"
            git push
          fi
        env:
          GIT_SSH_COMMAND: "ssh -i ~/.ssh/id_rsa"
        shell: bash