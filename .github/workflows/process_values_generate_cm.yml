name: Process Values and Generate ConfigMap

on:
  push:
    paths:
      - 'versions/**/processing-agent-config.yml'

jobs:
  generate-configmap:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Install Dependencies
        run: sudo apt-get install -y jq

      - name: Find Modified Config Files
        id: find_modified_files
        run: |
          if [[ "${{ github.event_name }}" == "push" ]]; then
            # For push events, compare the current commit with its parent
            MODIFIED_FILES=$(git diff --name-only ${{ github.sha }}^ ${{ github.sha }} -- 'versions/**/processing-agent-config.yml' || echo "")
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            # For pull requests, compare the PR's head commit with the base branch
            MODIFIED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} -- 'versions/**/processing-agent-config.yml' || echo "")
          else
            echo "Unsupported event type: ${{ github.event_name }}"
            echo "modified_files=none" >> $GITHUB_ENV
            exit 0
          fi
          
          if [ -z "$MODIFIED_FILES" ]; then
            echo "No modified config files found."
            echo "modified_files=none" >> $GITHUB_ENV
          else
            echo "Modified files found:"
            echo $MODIFIED_FILES
            # Replacing newlines with commas for easier parsing in later steps
            MODIFIED_FILES=$(echo $MODIFIED_FILES | tr '\n' ',')
            echo "modified_files=$MODIFIED_FILES" >> $GITHUB_ENV
          fi

      - name: Process Each Modified Config File
        if: env.modified_files != 'none'
        run: |
          IFS=',' read -r -a modified_files <<< "$MODIFIED_FILES"
          for file in "${modified_files[@]}"; do
            if [[ -n "$file" && -f "$file" ]]; then
              echo "Processing $file..."
              python3 ./scripts/process_values_to_cm.py "$file"
            else
              echo "File does not exist: $file"
            fi
          done

      - name: Commit ConfigMaps to processing-agent-automation Repository
        run: |
          REPO='https://github.com/redreveal/argocd-gitops-versions.git'
          CHANGED_FILES=$(git diff --name-only ${{ github.sha }}^ ${{ github.sha }} | grep 'versions/.*/processing-agent-config.yml')
          for FILE in $CHANGED_FILES; do
            REGION_DIR=$(dirname $FILE)
            CONFIGMAP_FILE=$(basename $FILE)
            TEMP_DIR=$(mktemp -d)
            git clone ${REPO} ${TEMP_DIR}
            mkdir -p ${TEMP_DIR}/${REGION_DIR}
            cp $FILE ${TEMP_DIR}/${REGION_DIR}/
            
            cd ${TEMP_DIR}
            git add ${REGION_DIR}/${CONFIGMAP_FILE}
            git commit -m "Update ConfigMap for ${REGION_DIR}"
            git push
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
